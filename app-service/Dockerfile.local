# # Using official rust base image
# FROM rust:alpine3.16

# # Set the application directory
# WORKDIR /app

# # Install musl-tools to make many crates compile successfully
# RUN apk add --no-cache musl-dev

# # Install cargo-watch
# RUN cargo install cargo-watch

# EXPOSE 8080

# # Copy the files to the Docker image
# COPY ./ ./

FROM rust:alpine3.18

# RUN cargo install diesel_cli --no-default-features --features postgres

RUN apk add --no-cache musl-dev

RUN cargo install cargo-watch --locked

WORKDIR /usr/src/app

EXPOSE 8080

COPY . .

VOLUME ["/usr/local/cargo"]

# FROM lukemathwalker/cargo-chef:latest-rust-1.59.0 as chef
# WORKDIR /app
# RUN apt update && apt install lld clang -y
# FROM chef as planner
# COPY . .
# # Compute a lock-like file for our project
# RUN cargo chef prepare  --recipe-path recipe.json
# FROM chef as builder
# COPY --from=planner /app/recipe.json recipe.json
# # Build our project dependencies, not our application!
# RUN cargo chef cook --release --recipe-path recipe.json
# # Up to this point, if our dependency tree stays the same,
# # all layers should be cached.
# COPY . .
# ENV SQLX_OFFLINE true
# # Build our project
# RUN cargo build --release --bin zero2prod
# FROM debian:bullseye-slim AS runtime
# WORKDIR /app
# RUN apt-get update -y \
#   && apt-get install -y --no-install-recommends openssl ca-certificates \
#   # Clean up
#   && apt-get autoremove -y \
#   && apt-get clean -y \
#   && rm -rf /var/lib/apt/lists/*
# COPY --from=builder /app/target/release/zero2prod zero2prod
# COPY configuration configuration
# ENV APP_ENVIRONMENT production
# ENTRYPOINT ["./zero2prod"]





# FROM rust:3.16 AS chef 
# # We only pay the installation cost once, 
# # it will be cached from the second build onwards
# RUN cargo install cargo-chef
# WORKDIR app/

# FROM chef AS planner
# COPY . .
# RUN cargo chef prepare  --recipe-path recipe.json

# FROM chef AS builder
# COPY --from=planner /app/recipe.json recipe.json
# # Build dependencies - this is the caching Docker layer!
# RUN cargo chef cook --release --recipe-path recipe.json
# # Build application
# COPY . .
# RUN cargo build --release --bin app

# # We do not need the Rust toolchain to run the binary!
# FROM debian:bookworm-slim AS runtime
# WORKDIR app/
# COPY --from=builder /app/target/release/app /usr/local/bin
# ENTRYPOINT ["/usr/local/bin/app"]