use serde::{Deserialize, Serialize};
use sqlx::types::{
    time::{Date, OffsetDateTime},
    Uuid,
};

// #[derive(Debug, Deserialize, Serialize, Clone)]
pub struct BreakdownBill {
    pub id: Uuid,
    pub primary_issue_id: Uuid,
    pub sponsor_id: Option<Uuid>,
    pub propublica_id: Option<String>,
    pub bill_code: Option<String>,
    pub bill_uri: Option<String>,
    pub bill_type: Option<String>,
    pub title: Option<String>,
    pub short_title: Option<String>,
    pub sponsor_propublica_id: Option<String>,
    pub sponsor_state: Option<String>,
    pub sponsor_party: Option<String>,
    pub gpo_pdf_uri: Option<String>,
    pub congressdotgov_url: Option<String>,
    pub govtrack_url: Option<String>,
    pub introduced_date: Option<String>,
    pub last_vote: Option<String>,
    pub house_passage: Option<String>,
    pub senate_passage: Option<String>,
    pub enacted: Option<String>,
    pub vetoed: Option<String>,
    pub primary_subject: Option<String>,
    pub summary: Option<String>,
    pub summary_short: Option<String>,
    pub latest_major_action_date: Option<String>,
    pub latest_major_action: Option<String>,
    pub last_updated: Option<String>,
    pub legislative_day: Option<String>,
    pub active: bool,
    pub committees: Option<Vec<String>>,
    pub committee_codes: Option<Vec<String>>,
    pub subcommittee_codes: Option<Vec<String>>,
    pub cosponsors_d: Option<i32>,
    pub cosponsors_r: Option<i32>,
    pub subjects: Option<Vec<String>>,
    pub edited: bool,
    pub human_summary: String,
    pub human_short_summary: String,
    pub human_title: String,
    pub human_short_title: String,
    pub importance: Option<i32>,
    pub created_at: OffsetDateTime,
    pub updated_at: OffsetDateTime,
}
