use crate::{api::error::ApiError, types::propublica_api::ProPublicaRep};
use sqlx::{types::Uuid, PgPool};

pub async fn save_propub_rep(rep: ProPublicaRep, db_connection: &PgPool) -> Result<Uuid, ApiError> {
    let existing_rep = sqlx::query!(
        r#"
          SELECT * FROM representatives WHERE propublica_id = $1
      "#,
        rep.id
    )
    .fetch_optional(db_connection)
    .await?;

    // Insert or update
    match existing_rep {
        None => {
            // Insert new rep
            let house_val = match rep.short_title.as_str() {
                "Sen." => "senate",
                "Rep." => "house",
                _ => "house",
            };
            let query_result = sqlx::query!(
                r#"insert into REPRESENTATIVES (
                  title,
                  short_title,
                  api_uri,
                  first_name,
                  middle_name,
                  last_name,
                  suffix,
                  date_of_birth,
                  gender,
                  party,
                  leadership_role,
                  twitter_account,
                  facebook_account,
                  youtube_account,
                  govtrack_id,
                  cspan_id,
                  votesmart_id,
                  icpsr_id,
                  crp_id,
                  google_entity_id,
                  fec_candidate_id,
                  url,
                  rss_url,
                  contact_form,
                  in_office,
                  cook_pvi,
                  dw_nominate,
                  seniority,
                  next_election,
                  total_votes,
                  missed_votes,
                  total_present,
                  last_updated,
                  ocd_id,
                  office,
                  phone,
                  fax,
                  state,
                  senate_class,
                  state_rank,
                  lis_id,
                  missed_votes_pct,
                  votes_with_party_pct,
                  votes_against_party_pct,
                  propublica_id,
                  house
              ) values (
                  $1,
                  $2,
                  $3,
                  $4,
                  $5,
                  $6,
                  $7,
                  $8,
                  $9,
                  $10,
                  $11,
                  $12,
                  $13,
                  $14,
                  $15,
                  $16,
                  $17,
                  $18,
                  $19,
                  $20,
                  $21,
                  $22,
                  $23,
                  $24,
                  $25,
                  $26,
                  $27,
                  $28,
                  $29,
                  $30,
                  $31,
                  $32,
                  $33,
                  $34,
                  $35,
                  $36,
                  $37,
                  $38,
                  $39,
                  $40,
                  $41,
                  $42,
                  $43,
                  $44,
                  $45,
                  $46
              ) returning id"#,
                rep.title,
                rep.short_title,
                rep.api_uri,
                rep.first_name,
                rep.middle_name,
                rep.last_name,
                rep.suffix,
                rep.date_of_birth,
                rep.gender,
                rep.party,
                rep.leadership_role,
                rep.twitter_account,
                rep.facebook_account,
                rep.youtube_account,
                rep.govtrack_id,
                rep.cspan_id,
                rep.votesmart_id,
                rep.icpsr_id,
                rep.crp_id,
                rep.google_entity_id,
                rep.fec_candidate_id,
                rep.url,
                rep.rss_url,
                rep.contact_form,
                rep.in_office,
                rep.cook_pvi,
                rep.dw_nominate,
                rep.seniority,
                rep.next_election,
                rep.total_votes,
                rep.missed_votes,
                rep.total_present,
                rep.last_updated,
                rep.ocd_id,
                rep.office,
                rep.phone,
                rep.fax,
                rep.state,
                rep.senate_class,
                rep.state_rank,
                rep.lis_id,
                rep.missed_votes_pct,
                rep.votes_with_party_pct,
                rep.votes_against_party_pct,
                rep.id,
                house_val.to_string()
            )
            .fetch_one(db_connection)
            .await?;
            Ok(query_result.id)
        }
        Some(existing_rep) => {
            // Update rep record
            let query_result = sqlx::query!(
              r#"
              UPDATE representatives
                  SET title = coalesce($2, representatives.title),
                      short_title = coalesce($3, representatives.short_title),
                      api_uri = coalesce($4, representatives.api_uri),
                      date_of_birth = coalesce($5, representatives.date_of_birth),
                      gender = coalesce($6, representatives.gender),
                      party = coalesce($7, representatives.party),
                      leadership_role = coalesce($8, representatives.leadership_role),
                      twitter_account = coalesce($9, representatives.twitter_account),
                      facebook_account = coalesce($10, representatives.facebook_account),
                      youtube_account = coalesce($11, representatives.youtube_account),
                      govtrack_id = coalesce($12, representatives.govtrack_id),
                      cspan_id = coalesce($13, representatives.cspan_id),
                      votesmart_id = coalesce($14, representatives.votesmart_id),
                      icpsr_id = coalesce($15, representatives.icpsr_id),
                      crp_id = coalesce($16, representatives.crp_id),
                      google_entity_id = coalesce($17, representatives.google_entity_id),
                      fec_candidate_id = coalesce($18, representatives.fec_candidate_id),
                      url = coalesce($19, representatives.url),
                      rss_url = coalesce($20, representatives.rss_url),
                      contact_form = coalesce($21, representatives.contact_form),
                      in_office = coalesce($22, representatives.in_office),
                      cook_pvi = coalesce($23, representatives.cook_pvi),
                      dw_nominate = coalesce($24, representatives.dw_nominate),
                      seniority = coalesce($25, representatives.seniority),
                      next_election = coalesce($26, representatives.next_election),
                      total_votes = coalesce($27, representatives.total_votes),
                      missed_votes = coalesce($28, representatives.missed_votes),
                      total_present = coalesce($29, representatives.total_present),
                      last_updated = coalesce($30, representatives.last_updated),
                      ocd_id = coalesce($31, representatives.ocd_id),
                      office = coalesce($32, representatives.office),
                      phone = coalesce($33, representatives.phone),
                      fax = coalesce($34, representatives.fax),
                      state = coalesce($35, representatives.state),
                      district = coalesce($36, representatives.district),
                      senate_class = coalesce($37, representatives.senate_class),
                      state_rank = coalesce($38, representatives.state_rank),
                      lis_id = coalesce($39, representatives.lis_id),
                      missed_votes_pct = coalesce($40, representatives.missed_votes_pct),
                      votes_with_party_pct = coalesce($41, representatives.votes_with_party_pct),
                      votes_against_party_pct = coalesce($42, representatives.votes_against_party_pct)
              WHERE id = $1
              returning id
          "#,
              existing_rep.id,
              existing_rep.title,
              existing_rep.short_title,
              existing_rep.api_uri,
              existing_rep.date_of_birth,
              existing_rep.gender,
              existing_rep.party,
              existing_rep.leadership_role,
              existing_rep.twitter_account,
              existing_rep.facebook_account,
              existing_rep.youtube_account,
              existing_rep.govtrack_id,
              existing_rep.cspan_id,
              existing_rep.votesmart_id,
              existing_rep.icpsr_id,
              existing_rep.crp_id,
              existing_rep.google_entity_id,
              existing_rep.fec_candidate_id,
              existing_rep.url,
              existing_rep.rss_url,
              existing_rep.contact_form,
              existing_rep.in_office,
              existing_rep.cook_pvi,
              existing_rep.dw_nominate,
              existing_rep.seniority,
              existing_rep.next_election,
              existing_rep.total_votes,
              existing_rep.missed_votes,
              existing_rep.total_present,
              existing_rep.last_updated,
              existing_rep.ocd_id,
              existing_rep.office,
              existing_rep.phone,
              existing_rep.fax,
              existing_rep.state,
              existing_rep.district,
              existing_rep.senate_class,
              existing_rep.state_rank,
              existing_rep.lis_id,
              existing_rep.missed_votes_pct,
              existing_rep.votes_with_party_pct,
              existing_rep.votes_against_party_pct
          ).fetch_one(db_connection).await?;
            Ok(query_result.id)
        }
    }
}
